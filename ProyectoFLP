#lang eopl
#|

<progama>   ::= {<estructura>}* <expresion>

<expresion> ::= <bool-expresion>
            ::= <identificador>
            ::= <numero>
            ::= <caracter>
            ::= <cadena>
            ::= "let" { <identificador> "=" <expresion>}*(,) "in" <expresion>
            ::= "set" <identificador> "=" <expresion>
            ::= "begin" <expresion> {<expresion>}*(;) "end"
            ::= <primitiva> "(" {<expresion} ")" ")"
            ::= "cond" { "[" <bool-expresion> "]" }* "[" "else" <expresion> "]"
            ::= "proc" "(" {<identificador}*(,) ")" <expresion> "end"
            ::= "for" <identificador> "=" <expresion> "to" <expresion> "do" <expresion> "end"
            ::= "while" "("  <bool-expresion> ")" "do" <expresion>
            ::= "struct" <identificador> "{" (<identificador>)*(;) "}"  ";"
<expression>::= "struct" <identificador> "{" {<identificador> ";"}* "}" (<identificador> "=" "{" {<expresion> ","}* "}")* ";" <expresion> :: struct-exp
            ::= <identificador> "=" <identificador> "(" <expresion>* ")"(,) ";"
            ::= "get" <identificador>"."<identificador> ";;"
            ::= "update" <identificador>"."<identificador> "=" <expresion> ";"
<bool-expresion>
            ::= true
            ::= false
            ::= <bool-primitiva> "(" {<expresion> }*(,) ")"
            ::= <bool-operacion> "(" {<bool-expresion> }*(,) ")"

<primitiva> := +|-|*|%|/|sum1|res1
<list-primitiva>
           := length|concat
<bool-primitiva>
            := < | > | <= | => | == | != | and | or | not
   
|#

;; Especificación léxica
(define lexical-spec
  '((white-sp (whitespace) skip)
    (comment ("//" (arbno (not #\newline))) skip)
    ;;<identifier> ::= <letter> (<letter> | <digit> | "?" | "$" | "_" )*
    (identifier (letter (arbno (or letter digit "?" "$" "_"))) symbol)
    ;;<string> ::= '"' ( <letter> | <digit> | <whitespace>| "." | "," | ":" | ";" | "-" | "*" | "{" | "}" | "+" | "¡" | "!" | "¿" | "?" | "=" | "'" | "@" | "#" | "%" | "$" | "&" | "/" | "(" | ")" | ">" | "<" | "|")* '"'
    (string ("\"" (arbno (or letter digit whitespace
                             "." "," ":" ";" "-" "*" "{" "}" "+" "¡" "!" "¿" "?" "=" "'" "@" "#" "%" "$" "&" "/" "(" ")" ">" "<" "|")) "\"") string)
    ;;<integer> ::= <digit> <digit>*
    (integer (digit (arbno digit)) number)
    ;;<integer> ::= "-" <integer>
    (integer ("-" digit (arbno digit)) number)
    ;;<float> ::= <integer> "." <integer>
    (float (digit (arbno digit) "." digit (arbno digit)) number)
    ;;<float> ::= "-" <float>
    (float ("-" digit (arbno digit) "." digit (arbno digit)) number)
    ;;<hexadecimal> ::= "#x" ( <digit> | "A" | "B" | "C" | "D" | "E" | "F" ) ( <digit> | "A" | "B" | "C" | "D" | "E" | "F" )*
    (hexadecimal ("#x" (or digit "A" "B" "C" "D" "E" "F") (arbno (or digit "A" "B" "C" "D" "E" "F"))) number)
    ;;<octal> ::= "#o" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8")*
    (octal ("#o" (or "0" "1" "2" "3" "4" "5" "6" "7" "8") (arbno (or "0" "1" "2" "3" "4" "5" "6" "7" "8"))) number)))


;; Especificación gramatical
(define grammar-spec
  '((program (expression) a-program)
    
    ;; Basic expressions        
    ;; <expression> ::= <identifier> :: var-exp
    (expression (identifier) var-exp)
    ;; <expression> ::= <integer> :: int-exp
    (expression (integer) int-exp)
    ;; <expression> ::= <float> :: float-exp
    (expression (float) float-exp)
    ;; <expression> ::= <hexadecimal> :: hex-exp
    (expression (hexadecimal) hex-exp)
    ;; <expression> ::= <octal> :: oct-exp
    (expression (octal) oct-exp)
    ;; <expression> ::= <string> :: str-exp
    (expression (string) str-exp)
    ;; <expression> ::= "True" :: true-exp
    (expression ("True") true-exp)
    ;; <expression> ::= "False" :: false-exp
    (expression ("False") false-exp)
    
    ;; Primitive expressions
    ;; <expression> ::= <primitive> <expression> :: prim-exp
    (expression (primitive expression) prim-exp)
    ;; <expression> ::= "(" <expression> <primitive-bin> <expression> ")" :: prim-bin-exp
    (expression ("(" expression primitive-bin expression ")") prim-bin-exp)
    
    ;; Conditional expression
    ;; <expression> ::= "if" <expression> "{" <expression> <expression>* "}" ( "elif" <expression> "{" <expression>* "}" )* "else" "{" <expression>* "}" :: if-exp
    (expression ("if" expression "{" expression (arbno expression) "}"
                      (arbno "elif" expression "{" (arbno expression) "}")
                      "else" "{" (arbno expression) "}") if-exp)
    ;; <expression> ::= "cond" ("{" <expression> <expression> "}")* "else" <expression> :: cond-exp
    (expression ("cond" (arbno "{" expression expression "}" ) "else" expression)cond-exp)
    
    ;; Assignation expression
    ;; <expression> ::= ( "var" <identifier> "=" <expression> )* ";" <expression> :: assign-exp
    (expression ((arbno "var" identifier "=" expression) ";" expression) assign-exp)
    ;; <expression> ::= "change" <identifier> "=" <expression> :: set-exp
    (expression ( "change" identifier "=" expression) set-exp)
    
    ;; Function declaraction expression (general and recursive functions)
    ;; <expression> ::= "return" <expression> :: return-exp
    (expression ("return" expression) return-exp)
    ;; <expression> ::= "func" (<identifier> "(" {<identifier> ","}* ")" "{" <expression>* "}")* ";" <expression> :: func-exp
    (expression ("func" ( arbno identifier "(" (separated-list identifier ",") ")" "{" (arbno expression) "}") ";" expression) func-exp)
    ;; Function call expression
    ;; <expression> ::= "call" <identifier> "(" {<expression> ","}* ")" :: call-exp
    (expression ("call" identifier "(" (separated-list expression ",") ")") call-exp)
    
    ;; For expression
    ;; <expression> ::= "for" <identifier> "in" <expression> "{" <expression> "}" :: for-exp
    (expression ("for" identifier "in" expression "{" expression "}") for-exp)
    ;; <expression> ::= "{" <expression> ".." <expression> "}" :: range-exp
    (expression ("{" expression ".." expression "}") range-exp)

    ;;While expression
    ;; <expression> ::= "while" <expression> "{" <expression> "}" :: while-exp
    (expression ("while" expression "{" expression "}") while-exp)
    
    ;; Sequence expression
    ;; <expression> ::= "start" <expression> <expression>* "end" :: start-exp
    (expression ("start" expression (arbno expression) "end") start-exp)

    ;; structure call expression
    ;; <expression> ::= "get" <identifier> "." <expression> ";;" :: call-struct-exp
    (expression ("get" identifier "." expression ";;") call-struct-exp)

    ;;<expression> ::= "set" <identifier> "." <expression> "=" <expression> ";" :: set-struct-exp
    (expression ("set" identifier "." expression "=" expression ";") set-struct-exp)
    
    ;; Structure expression
    ;; <expression> ::= "struct" <identifier> "{" {<identifier> ";"}* "}"   ";"  :: struct-exp
    (expression ("struct" identifier "{" (separated-list identifier ";") "}" ";" ) struct-exp)
    
   ;;<expression> ::=  "new" <identifier> "=" <identifier> "(" {<expression> ","} ")" )* ";"  :: strct-exp
   (expression ("new" identifier "=" identifier "(" (separated-list expression ",") ")" ";" )  strct-exp)

    
    ;; Primitives    
    ;; <primitive-bin> ::= + :: add-prim
    (primitive-bin ("+") add-prim)
    ;; <primitive-bin> ::= - :: subst-prim
    (primitive-bin ("-") subst-prim)
    ;; <primitive-bin> ::= / :: div-prim
    (primitive-bin ("/") div-prim)
    ;; <primitive-bin> ::= * :: mult-prim
    (primitive-bin ("*") mult-prim)
    ;; <primitive-bin> ::= % :: mod-prim
    (primitive-bin ("%") mod-prim)
    ;; <primitive-bin> ::= < :: less-prim
    (primitive-bin ("<") less-prim)
    ;; <primitive-bin> ::= > :: greater-prim
    (primitive-bin (">") greater-prim)
    ;; <primitive-bin> ::= <= :: less-e-prim
    (primitive-bin ("<=") less-e-prim)
    ;; <primitive-bin> ::= >= :: greater-e-prim
    (primitive-bin (">=") greater-e-prim)
    ;; <primitive-bin> ::= == :: equal-prim
    (primitive-bin ("==") equal-prim)
    ;; <primitive-bin> ::= != :: no-equal-prim
    (primitive-bin ("!=") no-equal-prim)
    ;; <primitive-bin> ::= and :: and-prim
    (primitive-bin ("and") and-prim)
    ;; <primitive-bin> ::= or :: or-prim
    (primitive-bin ("or") or-prim)
    ;; <primitive-bin> ::= concat :: concat-prim
    (primitive-bin ("concat") concat-prim)
    
    ;; <primitive> ::= not :: not-prim
    (primitive ("not") not-prim)
    ;; <primitive> ::= add1 :: add1-prim
    (primitive ("add1") add1-prim)
    ;; <primitive> ::= sub1 :: sub1-prim
    (primitive ("sub1") sub1-prim)
    ;; <primitive> ::= length :: len-prim
    (primitive ("length") len-prim)
    ))

;define Datatypes
(sllgen:make-define-datatypes lexical-spec grammar-spec)

;funcion princial
(define eval-program
  (lambda (prog)
    prog))

;;Interpretador
(define interpretador
  (sllgen:make-rep-loop "-->" eval-program
                        (sllgen:make-stream-parser
                         lexical-spec grammar-spec)))
    

(interpretador)

